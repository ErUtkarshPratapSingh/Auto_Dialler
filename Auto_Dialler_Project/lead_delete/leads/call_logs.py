import requests
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Hardcoded agent ID to phone number mapping
AGENT_MAPPING = {
    "504082220001":"917428535851",
    "504082220026":"918130711993",
    "504082220027":"919667972666",
    "504082220028":"917428326003",
    "504082220029":"919310405616",
    "504082220030":"919999999999",
    "504082220031":"918527918525",
    "504082220037":"919213166004",
    "504082220041":"919811737066",
    "504082220050":"917982260128",
    "504082220052":"917004082512",
    "504082220053":"918077413500",
    "504082220054":"917303450033",
    "504082220055":"918982741387",
    "504082220059":"918826650072",
    "504082220060":"917042399366",
    "504082220061":"918920155531",
    "504082220062":"919289479421",
    "504082220063":"918920155309",
    "504082220065":"917710980886",
    "504082220066":"919599440561",
    "504082220067":"917042428622",
    "504082220068":"919810669071",
    "504082220070":"919667295285",
    "504082220071":"919818798489",
    "504082220074":"918130658754",
    "504082220077":"917900593929",
    "504082220078":"919267928301",
    "504082220081":"919891581958",
    "504082220082":"919625282374",
    "504082220083":"916387754501",
    "504082220085":"919311076504",
    "504082220096":"918130048792",
    "504082220099":"919599852796",
    "504082220100":"917291997235",
    "504082220106":"919205007255",
    "504082220107":"919599448592",
    "504082220111":"917905530781",
    "504082220112":"918368482574",
    "504082220116":"919518404906",
    "504082220120":"917428125160",
    "504082220121":"917479671920",
    "504082220122":"918532988101",
    "504082220123":"917303097830",
    "504082220130":"918448191312",
    "504082220133":"918860821269",
    "504082220135":"917053481916",
    "504082220136":"919354569891",
    "504082220137":"918287549338",
    "504082220139":"918826870012",
    "504082220140":"918920609468",
    "504082220142":"918076370014",
    "504082220143":"918377030607",
    "504082220149":"917983886133",
    "504082220151":"917982973714",
    "504082220153":"918802747461",
    "504082220155":"917060179953",
    "504082220157":"918603916893",
    "504082220159":"918269699154",
    "504082220161":"919034513740",
    "504082220162":"919340852713",
    "504082220163":"918750290287",
    "504082220165":"919911382188",
    "504082220168":"918826066354",
    "504082220169":"919643394268",
    "504082220170":"918826664202",
    "504082220171":"919315359830",
    "504082220173":"918447664992",
    "504082220175":"916393846840",
    "504082220178":"917291975970",
    "504082220179":"917906095290",
    "504082220183":"919412549193",
    "504082220185":"916392613315",
    "504082220187":"919608878891",
    "504082220188":"916263020229",
    "504082220189":"919310698360",
    "504082220190":"918210312898",
    "504082220194":"919354497297",
    "504082220195":"918008525507",
    "504082220196":"917017421727",
    "504082220202":"919289368487",
    "504082220205":"919597548088",
    "504082220228":"919319252170",
    "504082220229":"917906710116",
    "504082220232":"918757045366",
    "504082220233":"918076269121",
    "504082220234":"919144790400",
    "504082220235":"919958926636",
    "504082220237":"919599019919",
    "504082220238":"919958752151",
    "504082220240":"917903578562",
    "504082220241":"918448392360",
    "504082220242":"918178438606",
    "504082220244":"919319092416",
    "504082220249":"918595010377",
    "504082220250":"918810311915",
    "504082220254":"918882725672",
    "504082220257":"918287334379",
    "504082220259":"919318460311",
    "504082220273":"918826664110",
    "504082220274":"919958397916",
    "504082220275":"918178124182",
    "504082220276":"918302105796",
    "504082220279":"919810281742",
    "504082220280":"919696443935",
    "504082220281":"916397956449",
    "504082220284":"917355792746",
    "504082220288":"919958156404",
    "504082220289":"917900400394",
    "504082220300":"918368710932",
    "504082220304":"918073169612",
    "504082220305":"919773984033",
    "504082220308":"917042877448",
    "504082220315":"917042594555",
    "504082220316":"917020325606",
    "504082220321":"917210247665",
    "504082220324":"919354639812",
    "504082220331":"919891511647",
    "504082220341":"917747854452",
    "504082220342":"918368933188",
    "504082220344":"918860087361",
    "504082220345":"917982754979",
    "504082220350":"918929802077",
    "504082220352":"916386258484",
    "504082220355":"917042693131",
    "504082220356":"917042380088",
    "504082220363":"917992429281",
    "504082220364":"919084127200",
    "504082220369":"919910865367",
    "504082220376":"919818298025",
    "504082220378":"918433482189",
    "504082220379":"919717382814",
    "504082220382":"919267949291",
    "504082220388":"917003161403",
    "504082220390":"916203279696",
    "504082220405":"919958250089",
    "504082220406":"919667982502",
    "504082220408":"918687838426",
    "504082220409":"918743092601",
    "504082220452":"918826690912",
    "504082220455":"918224894395",
    "504082220460":"918700886943",
    "504082220462":"919990307734",
    "504082220465":"917992265351",
    "504082220466":"917982873049",
    "504082220467":"919818627951",
    "504082220468":"919990777839",
    "504082220469":"919911680565",
    "504082220472":"918587020729",
    "504082220473":"918377882802",
    "504082220474":"918920129294",
    "504082220475":"919718164681",
    "504082220478":"919917416172",
    "504082220480":"918506895034",
    "504082220481":"919314153806",
    "504082220485":"918510055493",
    "504082220525":"919818289137",
    "504082220526":"919667985222",
    "504082220527":"919667657111",
    "504082220532":"919758345098",
    "504082220533":"918826749777",
    "504082220534":"917042786698",
    "504082220535":"919560757754",
    "504082220536":"919311075029",
    "504082220537":"919639260760",
    "504082220538":"919868449492",
    "504082220539":"919608909454",
    "504082220541":"917428303400",
    "504082220542":"919310991475",
    "504082220543":"918303133206",
    "504082220544":"917678400940",
    "504082220546":"916396634873",
    "504082220547":"919654023444",
    "504082220549":"918077634086",
    "504082220550":"919354444328",
    "504082220552":"917303988422",
    "504082220553":"918448814225",
    "504082220556":"918449009009",
    "504082220558":"919667822037",
    "504082220559":"919810424631",
    "504082220560":"918527396525",
    "504082220562":"919818288581",
    "504082220564":"919667823074",
    "504082220565":"917042460346",
    "504082220566":"919667823742",
    "504082220568":"919667879584",
    "504082220569":"918929207498",
    "504082220570":"919667820562",
    "504082220571":"919667820586",
    "504082220572":"918447964749",
    "504082220575":"918545013729",
    "504082220576":"916203791744",
    "504082220577":"918795255432",
    "504082220578":"919696963215",
    "504082220579":"917827715417",
    "504082220580":"919917169818",
    "504082220582":"918285426271",
    "504082220583":"917303559186",
    "504082220584":"919560209641",
    "504082220585":"917838752633",
    "504082220587":"917838828679",
    "504082220588":"918808829649",
    "504082220589":"919582515861",
    "504082220590":"917011123101",
    "504082220591":"919205819076",
    "504082220592":"918731086261",
    "504082220593":"916201813956",
    "504082220594":"918527046525",
    "504082220597":"919318497399",
    "504082220599":"917701878983",
    "504082220600":"918759077302",
    "504082220601":"918851630814",
    "504082220602":"916360026084",
    "504082220603":"919122562456",
    "504082220604":"917042559663",
    "504082220605":"918800982634",
    "504082220606":"919718483392",
    "504082220607":"919560828457",
    "504082220608":"918700323995",
    "504082220609":"919760611287",
    "504082220610":"919415633010",
    "504082220612":"919711853730",
    "504082220613":"918175929858",
    "504082220614":"917827656143",
    "504082220615":"916394529608",
    "504082220616":"919997718181",
    "504082220619":"918305296377",
    "504082220622":"917651864422",
    "504082220623":"919999561710",
    "504082220624":"918802489376",
    "504082220625":"917982004253",
    "504082220626":"916306488229",
    "504082220627":"918800974969",
    "504082220628":"918299181061",
    "504082220629":"919905155808",
    "504082220630":"919368094733",
    "504082220631":"918127813418",
    "504082220632":"919315784675",
    "504082220634":"919984888100",
    "504082220635":"918882961275",
    "504082220637":"918368344635",
    "504082220638":"919560758312",
    "504082220639":"918439775957",
    "504082220640":"916264609792",
    "504082220641":"919119066644",
    "504082220642":"918851218726",
    "504082220643":"917042672791",
    "504082220645":"919899629670",
    "504082220646":"917486857356",
    "504082220650":"919716905548",
    "504082220651":"918887987547",
    "504082220652":"917897462524",
    "504082220653":"918920845755",
    "504082220655":"918308606758",
    "504082220656":"919146550306",
    "504082220657":"916209286181",
    "504082220658":"918127045656",
    "504082220659":"918081841900",
    "504082220661":"918252010673",
    "504082220662":"917392871258",
    "504082220664":"919455271928",
    "504082220665":"918171410552",
    "504082220667":"919205826820",
    "504082220668":"918587819791",
    "504082220669":"917452045545",
    "504082220670":"917428844758",
    "504082220672":"919599251154",
    "504082220673":"919205338995",
    "504082220674":"919162424376",
    "504082220677":"917428285477",
    "504082220678":"919354199174",
    "504082220679":"919756088051",
    "504082220680":"918368438424",
    "504082220683":"919179572826",
    "504082220684":"917503409340",
    "504082220685":"919911693158",
    "504082220686":"919717074744",
    "504082220687":"918287280613",
    "504082220688":"919628588360",
    "504082220689":"917905246588",
    "504082220690":"918860694145",
    "504082220691":"919810395812",
    "504082220692":"917042663666",
    "504082220693":"917089934905",
    "504082220694":"919354185991",
    "504082220695":"916206864452",
    "504082220696":"916201007029",
    "504082220697":"918340566054",
    "504082220698":"918851718596",
    "504082220699":"916376682766",
    "504082220700":"919459200158",
    "504082220701":"918750805482"


    
}

OUTGOING_WEBHOOK_URL = "https://api-in21.leadsquared.com/v2/Telephony.svc/LogCall?accessKey=u$r2ab6f9c9aa07272a2957c433465a13a4&secretKey=1c89b25aa02ba114a0ede2bf147fb59819487b23"

@csrf_exempt
def call_log_webhook(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            logger.info(f"Received Webhook Data: {data}")  # ✅ Log Incoming Webhook Data
            
            answered_agent = data.get("answered_agent", [{}])[0]
            agent_id = answered_agent.get("id")

            if not agent_id:
                logger.error("Agent ID missing in webhook data")  # ✅ Log Missing Agent ID
                return JsonResponse({"status": "error", "message": "Agent ID missing"}, status=400)

            # Fetch agent phone number from the mapping
            agent_number = AGENT_MAPPING.get(agent_id)

            if not agent_number:
                logger.warning(f"Agent ID {agent_id} not found in mapping")  # ✅ Log Missing Agent ID Mapping
                return JsonResponse({"status": "error", "message": "Agent ID not found"}, status=404)
            
            # Get the call status
            call_status = data.get("Status")
            
            # ✅ Only send the webhook if the call status is "Answered"
            if call_status != "answered":
                logger.info(f"Skipping webhook for call status: {call_status}")
                return JsonResponse({"status": "skipped", "message": f"Call status is {call_status}, not 'answered'"}, status=200)

            # Construct the outgoing payload
            outgoing_payload = {
                "SourceNumber": agent_number,  
                "CallerSource": data.get("CallerSource"),
                "DestinationNumber": data.get("DestinationNumber"),
                "DisplayNumber": "Auto_Dialler",
                "StartTime": data.get("StartTime"),
                "EndTime": data.get("EndTime"),
                "CallDuration": data.get("CallDuration"),
                "ResourceURL": data.get("ResourceURL"),
                "Direction": data.get("Direction"),
                "CallSessionId": data.get("CallSessionId"),
                "Status": data.get("Status"),
                "mx_Custom_12": data.get("mx_Custom_12"),
                "mx_Custom_10": data.get("mx_Custom_10"),
                "answered_agent": answered_agent  
            }

            logger.info(f"Sending webhook to {OUTGOING_WEBHOOK_URL} with data: {outgoing_payload}")  # ✅ Log Outgoing Request

            # Send the webhook
            response = requests.post(OUTGOING_WEBHOOK_URL, json=outgoing_payload)
            response.raise_for_status()

            logger.info(f"Webhook successfully sent. Response: {response.json()}")  # ✅ Log Success Response
            return JsonResponse({"status": "success", "sent_data": outgoing_payload}, status=200)

        except json.JSONDecodeError:
            logger.error("Invalid JSON received")  # ✅ Log JSON Parsing Error
            return JsonResponse({"status": "error", "message": "Invalid JSON"}, status=400)
        except requests.RequestException as req_err:
            logger.error(f"Error sending webhook: {req_err}")  # ✅ Log Webhook Request Failure
            return JsonResponse({"status": "error", "message": f"Webhook send error: {req_err}"}, status=500)

    return JsonResponse({"status": "error", "message": "Invalid request method"}, status=405)
